[{"/Users/gaopeng/Desktop/react15/app/src/index.js":"1","/Users/gaopeng/Desktop/react15/app/src/react/index.js":"2","/Users/gaopeng/Desktop/react15/app/src/react/constants.js":"3","/Users/gaopeng/Desktop/react15/app/src/react/vDom.js":"4","/Users/gaopeng/Desktop/react15/app/src/react/vdom.js":"5","/Users/gaopeng/Desktop/react15/app/src/react-dom/index.js":"6","/Users/gaopeng/Desktop/react15/app/src/react/utils.js":"7","/Users/gaopeng/Desktop/react15/app/src/react/event.js":"8","/Users/gaopeng/Desktop/react15/app/src/react/component.js":"9"},{"size":2011,"mtime":1612710692349,"results":"10","hashOfConfig":"11"},{"size":1410,"mtime":1612710490451,"results":"12","hashOfConfig":"11"},{"size":301,"mtime":1612626402762,"results":"13","hashOfConfig":"11"},{"size":142,"mtime":1610247954230,"results":"14","hashOfConfig":"11"},{"size":3304,"mtime":1612626475185,"results":"15","hashOfConfig":"11"},{"size":268,"mtime":1612626692673,"results":"16","hashOfConfig":"11"},{"size":1221,"mtime":1612623980575,"results":"17","hashOfConfig":"11"},{"size":3409,"mtime":1612710715838,"results":"18","hashOfConfig":"11"},{"size":3683,"mtime":1612625419431,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"kfxgci",{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"24"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"24"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"24"},"/Users/gaopeng/Desktop/react15/app/src/index.js",["43","44","45","46","47"],"/Users/gaopeng/Desktop/react15/app/src/react/index.js",[],["48","49"],"/Users/gaopeng/Desktop/react15/app/src/react/constants.js",[],"/Users/gaopeng/Desktop/react15/app/src/react/vDom.js",[],["50","51"],"/Users/gaopeng/Desktop/react15/app/src/react/vdom.js",["52"],"import { TEXT, ELEMENT,CLASS_COMPONENT,FUNCTION_COMPONENT } from './constants';\nimport { onlyOne, setProps,flatten } from './utils';\n\nexport function ReactElement($$typeof, type, key, ref, props) {\n    let element = {\n        $$typeof, type, key, ref, props\n    }\n    return element\n}\n\nexport function createDom(element) {\n    element = onlyOne(element); // children是一个数组，取出第一个\n    console.log('element111: ', element);\n    let { $$typeof } = element;\n    let dom = null;\n    if (!$$typeof) { // element是一个字符串或者数字\n        dom = document.createTextNode(element)\n    } else if ($$typeof === TEXT) { // 对象{$$typeof:TEXT}\n        dom = document.createTextNode(element.content)\n    } else if ($$typeof === ELEMENT) {\n        dom = createNativeDom(element)\n    }else if ($$typeof ===  FUNCTION_COMPONENT) { // 函数组件\n        dom = createFunctionComponentDOM(element)    \n    }else if ($$typeof ===  CLASS_COMPONENT) {\n        dom = createClassComponentDOM(element)    \n    }\n    return dom\n}\n\n// 创建原生dom\nfunction createNativeDom(element) {\n    let { type, props } = element;\n    let dom = document.createElement(type);\n    // 1.创建此虚拟dom节点的子节点\n    createDomChildren(dom, element.props.children)\n    // 2. 给dom添加属性\n    setProps(dom, props)\n    return dom;\n}\n\nfunction createDomChildren(parentNode, children) {\n    children && flatten(children).map((child,index) => {\n        // child其实是虚拟dom，虚拟dom上加一个_mountIndex属性，指向此虚拟DOM节点在父亲节点中的索引\n        // 在后面我们做dom-diff的时候会变得非常非常重要\n        child._mountIndex = index;\n        let childDom = createDom(child);\n\n        parentNode.appendChild(childDom)\n    })\n}\n\n// 创建函数组件对应的真实dom对象\nfunction createFunctionComponentDOM(element){\n    let { type, props } = element; // type = FunctionCounter\n    let renderElement = type(props);\n    element.renderElement = renderElement; // 需要缓存，方便下次对比\n    let newDom = createDom(renderElement);\n    // 虚拟DOM的dom属性指向它创建出来的真实DOM\n    renderElement.dom = newDom; // 我们从虚拟DOM react元素创建出真实dom，创建出来后会把真实的dom添加到虚拟dom的dom属性上\n    return newDom\n    // element.renderElement.dom = 真实DOM\n}\n\nfunction createClassComponentDOM(element){\n   \n    let { type, props } = element;\n    let componentInstance = new type(props);\n    // 当创建类组件实例后，会在类组件的虚拟DOM对象上添加一个属性componentInstance，指向类组件的实例\n    element.componentInstance = componentInstance;\n    let renderElement = componentInstance.render();\n    // 在类组件实例上添加renderElement，指向上一次要渲染的虚拟DOM节点\n    // 在后面组件更新的时候，我们会重新render。然后根上一次的renderElement进行 dom diff 对比\n    componentInstance.renderElement = renderElement;\n    console.log('renderElement: ', renderElement);\n    let newDom = createDom(renderElement);\n    console.log('newDom: ', newDom);\n    renderElement.dom = newDom; \n    console.log('element: ', element);\n    return newDom\n    // element.componentInstance.renderElement.dom = 真实的dom元素\n}","/Users/gaopeng/Desktop/react15/app/src/react-dom/index.js",["53"],"import { createDom } from '../react/vdom'\n\nfunction render(element, container) {\n    \n    // 1.要把虚拟DOM变成真实DOM\n    let dom = createDom(element)\n \n    //2. 直接把DOM挂载到container上\n    container.appendChild(dom)\n}\n\n\nexport default {\n    render\n}","/Users/gaopeng/Desktop/react15/app/src/react/utils.js",[],"/Users/gaopeng/Desktop/react15/app/src/react/event.js",[],"/Users/gaopeng/Desktop/react15/app/src/react/component.js",["54"],"import {isFunction} from './utils'\n\n//更新队列\nexport let updateQueue = {\n    updaters:[], // 这里放着将要执行的更新器对象\n    isPending:false, // 是否批量更新 如果isPending = true，则处于批量更新模式\n    add(updater){ // 放进去之后就完事了，不进行真正的更新，什么时候真正更新\n        this.updaters.push(updater)\n    },\n    // 需要有人调用batchUpdate 方法才会真正更新\n    batchUpdate(){ // 强行全部更新 执行真正的更新\n        let {updaters} = this;\n        this.isPending = true; // 进入批量更新\n        let updater;\n        while(updater = updaters.pop()){\n            updater.updateComponent() // 更新所有的dirty组件\n        }\n        this.isPending = false; // 改为非批量更新\n    }\n}\n\nclass Updater{\n    constructor(componentInstance){\n        this.componentInstance = componentInstance; // 一个Updater和一个类组件实例是一对一的关系\n        this.peddingStates = []; // 更新有可能是批量的，如果是处于批量更新的话，需要把分状态都先暂存到数组里，最后在更新的时候统一合并\n        this.nextProps = null; // 新的属性对象 \n    }\n    addState(partialState){\n        this.peddingStates.push(partialState);\n        this.emitUpdate(); // 开始视图更新\n    }\n    emitUpdate(nextProps){ // 可能会传一个新的属性对象过来\n        this.nextProps = nextProps;\n        // 如果传递了新的属性对象，或者当前是处于非批量更新模式的话就直接更新\n        // 如果有新的属性对象或者要立刻更新的话\n        if(nextProps || !updateQueue.isPending){\n            this.updateComponent();\n        }else {\n            //如果当前是批量更新的模式，则把自己这个updater实例放到updateQueue\n            updateQueue.add(this);\n        }\n    }\n    updateComponent(){\n        let {componentInstance,peddingStates,nextProps} = this;\n        if(nextProps || peddingStates.length>0){ // 长度>0说明有等待合并的更新状态\n            shouldUpdate(componentInstance,nextProps,this.getState());\n        }\n    }\n    getState(){\n        let {componentInstance,peddingStates,} = this;\n        let {state} = componentInstance;\n        if(peddingStates.length> 0){\n            peddingStates.forEach(nextState=>{\n                if(isFunction(nextState)){\n                    state = nextState.call(componentInstance,state);\n                }else {\n                    state = {...state,...nextState}\n                }\n            })\n        }\n        peddingStates.length = 0; // 用完之后清除\n        return state; \n    }\n  \n\n}\n// 判断是否要更新\nfunction shouldUpdate(componentInstance,nextProps,newState){\n    componentInstance.props = nextProps;\n    componentInstance.state = newState;\n    if(componentInstance.shouldComponentUpdate && !componentInstance.shouldComponentUpdate(nextProps,newState)){\n        return false; //不更新\n    }\n    componentInstance.forceUpdate(); // 当组件强行刷新\n}\n\nclass Component {\n    constructor(props){\n        this.props = props;\n        this.$update = new Updater(this);\n        this.state = {}; // 当前状态\n        this.nextProps = null; //下一个属性对象\n    }\n    // 批量更新 partial部分 因为状态可能会被合并\n    setState(partialState){\n        this.$update.addState(partialState)\n    }\n    // 进行组件更新\n    forceUpdate(){ \n        console.log('forceUpdate: ');\n       \n    }\n}\n\n// 类组件和函数组件编译之后都是函数 ，通过此属性区分函数组件还是类组件\nComponent.prototype.isReactComponent = {};\n\nexport {\n    Component \n} ",{"ruleId":"55","severity":1,"message":"56","line":19,"column":5,"nodeType":"57","messageId":"58","endLine":19,"endColumn":13},{"ruleId":"59","severity":1,"message":"60","line":26,"column":3,"nodeType":"61","messageId":"62","endLine":28,"endColumn":4},{"ruleId":"55","severity":1,"message":"63","line":64,"column":5,"nodeType":"57","messageId":"58","endLine":64,"endColumn":13},{"ruleId":"55","severity":1,"message":"64","line":65,"column":5,"nodeType":"57","messageId":"58","endLine":65,"endColumn":13},{"ruleId":"55","severity":1,"message":"65","line":66,"column":5,"nodeType":"57","messageId":"58","endLine":66,"endColumn":13},{"ruleId":"66","replacedBy":"67"},{"ruleId":"68","replacedBy":"69"},{"ruleId":"66","replacedBy":"70"},{"ruleId":"68","replacedBy":"71"},{"ruleId":"72","severity":1,"message":"73","line":42,"column":53,"nodeType":"74","messageId":"75","endLine":42,"endColumn":55},{"ruleId":"76","severity":1,"message":"77","line":13,"column":1,"nodeType":"78","endLine":15,"endColumn":2},{"ruleId":"79","severity":1,"message":"80","line":15,"column":15,"nodeType":"81","messageId":"82","endLine":15,"endColumn":39},"no-unused-vars","'element4' is assigned a value but never used.","Identifier","unusedVar","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","'element1' is assigned a value but never used.","'element2' is assigned a value but never used.","'element3' is assigned a value but never used.","no-native-reassign",["83"],"no-negated-in-lhs",["84"],["83"],["84"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","no-cond-assign","Expected a conditional expression and instead saw an assignment.","AssignmentExpression","missing","no-global-assign","no-unsafe-negation"]