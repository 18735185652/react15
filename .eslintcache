[{"/Users/gaopeng/Desktop/react15/app/src/index.js":"1","/Users/gaopeng/Desktop/react15/app/src/react/index.js":"2","/Users/gaopeng/Desktop/react15/app/src/react/constants.js":"3","/Users/gaopeng/Desktop/react15/app/src/react/vDom.js":"4","/Users/gaopeng/Desktop/react15/app/src/react/vdom.js":"5","/Users/gaopeng/Desktop/react15/app/src/react-dom/index.js":"6","/Users/gaopeng/Desktop/react15/app/src/react/utils.js":"7","/Users/gaopeng/Desktop/react15/app/src/react/event.js":"8","/Users/gaopeng/Desktop/react15/app/src/react/component.js":"9"},{"size":2043,"mtime":1612715568556,"results":"10","hashOfConfig":"11"},{"size":1410,"mtime":1612710490451,"results":"12","hashOfConfig":"11"},{"size":301,"mtime":1612626402762,"results":"13","hashOfConfig":"11"},{"size":142,"mtime":1610247954230,"results":"14","hashOfConfig":"11"},{"size":4610,"mtime":1612715593606,"results":"15","hashOfConfig":"11"},{"size":268,"mtime":1612626692673,"results":"16","hashOfConfig":"11"},{"size":1221,"mtime":1612623980575,"results":"17","hashOfConfig":"11"},{"size":3409,"mtime":1612710715838,"results":"18","hashOfConfig":"11"},{"size":4408,"mtime":1612714368674,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"kfxgci",{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"32","messages":"33","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"24"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"24"},"/Users/gaopeng/Desktop/react15/app/src/index.js",["42","43","44","45","46"],"/Users/gaopeng/Desktop/react15/app/src/react/index.js",[],["47","48"],"/Users/gaopeng/Desktop/react15/app/src/react/constants.js",[],"/Users/gaopeng/Desktop/react15/app/src/react/vDom.js",[],["49","50"],"/Users/gaopeng/Desktop/react15/app/src/react/vdom.js",["51"],"/Users/gaopeng/Desktop/react15/app/src/react-dom/index.js",["52"],"import { createDom } from '../react/vdom'\n\nfunction render(element, container) {\n    \n    // 1.要把虚拟DOM变成真实DOM\n    let dom = createDom(element)\n \n    //2. 直接把DOM挂载到container上\n    container.appendChild(dom)\n}\n\n\nexport default {\n    render\n}","/Users/gaopeng/Desktop/react15/app/src/react/utils.js",[],"/Users/gaopeng/Desktop/react15/app/src/react/event.js",[],"/Users/gaopeng/Desktop/react15/app/src/react/component.js",["53","54","55"],"import {isFunction} from './utils'\nimport {compareTwoElement} from './vdom'\n//更新队列\nexport let updateQueue = {\n    updaters:[], // 这里放着将要执行的更新器对象\n    isPending:false, // 是否批量更新 如果isPending = true，则处于批量更新模式\n    add(updater){ // 放进去之后就完事了，不进行真正的更新，什么时候真正更新\n        this.updaters.push(updater)\n    },\n    // 需要有人调用batchUpdate 方法才会真正更新\n    batchUpdate(){ // 强行全部更新 执行真正的更新\n        let {updaters} = this;\n        console.log('updatersaaa: ', this);\n        this.isPending = true; // 进入批量更新\n        let updater;\n        while(updater = updaters.pop()){\n            console.log('updater2222: ', updater);\n            updater.updateComponent() // 更新所有的dirty组件\n        }\n        this.isPending = false; // 改为非批量更新\n    }\n}\n\nclass Updater{\n    constructor(componentInstance){\n        this.componentInstance = componentInstance; // 一个Updater和一个类组件实例是一对一的关系\n        this.peddingStates = []; // 更新有可能是批量的，如果是处于批量更新的话，需要把分状态都先暂存到数组里，最后在更新的时候统一合并\n        this.nextProps = null; // 新的属性对象 \n    }\n    addState(partialState){\n        this.peddingStates.push(partialState);\n        this.emitUpdate(); // 开始视图更新\n    }\n    emitUpdate(nextProps){ // 可能会传一个新的属性对象过来\n        this.nextProps = nextProps;\n        // 如果传递了新的属性对象，或者当前是处于非批量更新模式的话就直接更新\n        // 如果有新的属性对象或者要立刻更新的话\n        if(nextProps || !updateQueue.isPending){\n            this.updateComponent();\n        }else {\n            //如果当前是批量更新的模式，则把自己这个updater实例放到updateQueue\n            updateQueue.add(this);\n        }\n    }\n    updateComponent(){\n        let {componentInstance,peddingStates,nextProps} = this;\n        if(nextProps || peddingStates.length>0){ // 长度>0说明有等待合并的更新状态\n            shouldUpdate(componentInstance,nextProps,this.getState());\n        }\n    }\n    getState(){\n        let {componentInstance,peddingStates,} = this;\n        let {state} = componentInstance;\n        if(peddingStates.length> 0){\n            peddingStates.forEach(nextState=>{\n                if(isFunction(nextState)){\n                    state = nextState.call(componentInstance,state);\n                }else {\n                    state = {...state,...nextState}\n                }\n            })\n        }\n        peddingStates.length = 0; // 用完之后清除\n        return state; \n    }\n  \n\n}\n// 判断是否要更新\nfunction shouldUpdate(componentInstance,nextProps,newState){\n    componentInstance.props = nextProps;\n    componentInstance.state = newState;\n    if(componentInstance.shouldComponentUpdate && !componentInstance.shouldComponentUpdate(nextProps,newState)){\n        return false; //不更新\n    }\n    componentInstance.forceUpdate(); // 当组件强行刷新\n}\n\nclass Component {\n    constructor(props){\n        this.props = props;\n        this.$update = new Updater(this);\n        this.state = {}; // 当前状态\n        this.nextProps = null; //下一个属性对象\n        console.log('thisaa',this);\n    }\n    // 批量更新 partial部分 因为状态可能会被合并\n    setState(partialState){\n        this.$update.addState(partialState)\n    }\n    // 进行组件更新\n    forceUpdate(){ \n        console.log('forceUpdate: ');\n        let {props,state,renderElement:oldRenderElement} = this;\n        if(this.componentWillUpdate){ //组件将要更新\n            this.componentWillUpdate()\n  \n        }\n        console.log('this: ', this);    \n        let newRenderElement = this.render();\n        console.log('newRenderElement: ', newRenderElement);\n        let currentElement = compareTwoElement(oldRenderElement,newRenderElement)   \n        this.renderElement = currentElement;\n        if(this.componentDidUpdate){\n            this.componentDidUpdate(); // 组件更新完成\n        }\n    }\n}\n\n// 类组件和函数组件编译之后都是函数 ，通过此属性区分函数组件还是类组件\nComponent.prototype.isReactComponent = {};\n\nexport {\n    Component \n} ",{"ruleId":"56","severity":1,"message":"57","line":19,"column":5,"nodeType":"58","messageId":"59","endLine":19,"endColumn":13},{"ruleId":"60","severity":1,"message":"61","line":26,"column":3,"nodeType":"62","messageId":"63","endLine":28,"endColumn":4},{"ruleId":"56","severity":1,"message":"64","line":63,"column":5,"nodeType":"58","messageId":"59","endLine":63,"endColumn":13},{"ruleId":"56","severity":1,"message":"65","line":64,"column":5,"nodeType":"58","messageId":"59","endLine":64,"endColumn":13},{"ruleId":"56","severity":1,"message":"66","line":65,"column":5,"nodeType":"58","messageId":"59","endLine":65,"endColumn":13},{"ruleId":"67","replacedBy":"68"},{"ruleId":"69","replacedBy":"70"},{"ruleId":"67","replacedBy":"71"},{"ruleId":"69","replacedBy":"72"},{"ruleId":"73","severity":1,"message":"74","line":44,"column":53,"nodeType":"75","messageId":"76","endLine":44,"endColumn":55},{"ruleId":"77","severity":1,"message":"78","line":13,"column":1,"nodeType":"79","endLine":15,"endColumn":2},{"ruleId":"80","severity":1,"message":"81","line":16,"column":15,"nodeType":"82","messageId":"83","endLine":16,"endColumn":39},{"ruleId":"56","severity":1,"message":"84","line":94,"column":14,"nodeType":"58","messageId":"59","endLine":94,"endColumn":19},{"ruleId":"56","severity":1,"message":"85","line":94,"column":20,"nodeType":"58","messageId":"59","endLine":94,"endColumn":25},"no-unused-vars","'element4' is assigned a value but never used.","Identifier","unusedVar","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","'element1' is assigned a value but never used.","'element2' is assigned a value but never used.","'element3' is assigned a value but never used.","no-native-reassign",["86"],"no-negated-in-lhs",["87"],["86"],["87"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","no-cond-assign","Expected a conditional expression and instead saw an assignment.","AssignmentExpression","missing","'props' is assigned a value but never used.","'state' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]